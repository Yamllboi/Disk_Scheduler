# -*- coding: utf-8 -*-
"""Task 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1afOt01N7-5jbVA2lkyTwKxOfVmv5cuby
"""

import random
import sys

def fcfs(requests, head):
    """First-Come-First-Served algorithm."""
    movement = 0
    current_position = head

    print("\nFCFS Scheduling:")
    print(f"Initial head position: {head}")

    for request in requests:
        print(f"Move from {current_position} to {request}, movement: {abs(current_position - request)}")
        movement += abs(current_position - request)
        current_position = request

    return movement

def scan(requests, head, max_cylinder):
    """SCAN algorithm (Elevator algorithm)."""
    movement = 0
    current_position = head

    # Sort requests
    sorted_requests = sorted(requests)

    # Find requests greater than or equal to head
    greater = [r for r in sorted_requests if r >= head]
    # Find requests less than head
    lesser = [r for r in sorted_requests if r < head]

    # Service direction (start going "up")
    direction = "up"

    print("\nSCAN Scheduling:")
    print(f"Initial head position: {head}")

    # Process in SCAN order: go to the highest cylinder, then reverse
    if direction == "up":
        # Go up to the end
        for request in greater:
            print(f"Move from {current_position} to {request}, movement: {abs(current_position - request)}")
            movement += abs(current_position - request)
            current_position = request

        # If we reached the end, go to max cylinder
        if greater:
            if current_position != max_cylinder:
                print(f"Move from {current_position} to {max_cylinder}, movement: {abs(current_position - max_cylinder)}")
                movement += abs(current_position - max_cylinder)
                current_position = max_cylinder
        else:
            print(f"Move from {current_position} to {max_cylinder}, movement: {abs(current_position - max_cylinder)}")
            movement += abs(current_position - max_cylinder)
            current_position = max_cylinder

        # Then go back down
        for request in reversed(lesser):
            print(f"Move from {current_position} to {request}, movement: {abs(current_position - request)}")
            movement += abs(current_position - request)
            current_position = request

    return movement

def c_scan(requests, head, max_cylinder):
    """C-SCAN algorithm (Circular SCAN)."""
    movement = 0
    current_position = head

    # Sort requests
    sorted_requests = sorted(requests)

    # Find requests greater than or equal to head
    greater = [r for r in sorted_requests if r >= head]
    # Find requests less than head
    lesser = [r for r in sorted_requests if r < head]

    print("\nC-SCAN Scheduling:")
    print(f"Initial head position: {head}")

    # Go up to the end
    for request in greater:
        print(f"Move from {current_position} to {request}, movement: {abs(current_position - request)}")
        movement += abs(current_position - request)
        current_position = request

    # If we're not at the end, go to the end
    if greater and current_position != max_cylinder:
        print(f"Move from {current_position} to {max_cylinder}, movement: {abs(current_position - max_cylinder)}")
        movement += abs(current_position - max_cylinder)
        current_position = max_cylinder
    elif not greater:  # If no greater requests, go to the end
        print(f"Move from {current_position} to {max_cylinder}, movement: {abs(current_position - max_cylinder)}")
        movement += abs(current_position - max_cylinder)
        current_position = max_cylinder

    # Jump to the beginning (count this movement)
    print(f"Jump from {current_position} to 0, movement: {current_position}")
    movement += current_position  # Going from max to 0 covers the full range
    current_position = 0

    # Continue from the beginning
    for request in lesser:
        print(f"Move from {current_position} to {request}, movement: {abs(current_position - request)}")
        movement += abs(current_position - request)
        current_position = request

    return movement

def generate_requests(num_requests, max_cylinder):
    """Generate random disk requests."""
    return [random.randint(0, max_cylinder) for _ in range(num_requests)]

def main():
    MAX_CYLINDER = 4999
    NUM_REQUESTS = 1000

    print("\n===== Disk Scheduling Algorithms Simulator =====")
    print(f"Simulating a disk with {MAX_CYLINDER + 1} cylinders (0-{MAX_CYLINDER})")

    while True:
        print("\nPlease select an option:")
        print("1. Run all algorithms with random requests")
        print("2. Enter custom requests")
        print("3. Exit")

        choice = input("\nYour choice (1-3): ")

        if choice == '3':
            print("Exiting program. Goodbye!")
            sys.exit(0)

        try:
            # Get initial head position
            head_pos = int(input(f"Enter initial head position (0-{MAX_CYLINDER}): "))
            if head_pos < 0 or head_pos > MAX_CYLINDER:
                print(f"Error: Head position must be between 0 and {MAX_CYLINDER}")
                continue

            if choice == '1':
                # Generate random requests
                print(f"\nGenerating {NUM_REQUESTS} random cylinder requests...")
                requests = generate_requests(NUM_REQUESTS, MAX_CYLINDER)
                print(f"First 10 requests: {requests[:10]}...")

            elif choice == '2':
                # Get custom requests
                custom_input = input("\nEnter comma-separated cylinder requests (or press Enter for random): ")
                if custom_input.strip():
                    try:
                        requests = [int(x.strip()) for x in custom_input.split(',')]
                        # Validate requests
                        if any(r < 0 or r > MAX_CYLINDER for r in requests):
                            print(f"Error: All requests must be between 0 and {MAX_CYLINDER}")
                            continue
                    except ValueError:
                        print("Error: Invalid input. Please enter numbers separated by commas.")
                        continue
                else:
                    num_req = int(input(f"Enter number of random requests (default: {NUM_REQUESTS}): ") or NUM_REQUESTS)
                    requests = generate_requests(num_req, MAX_CYLINDER)

            else:
                print("Invalid choice. Please select 1, 2, or 3.")
                continue

            # Run the algorithms
            fcfs_movement = fcfs(requests.copy(), head_pos)
            scan_movement = scan(requests.copy(), head_pos, MAX_CYLINDER)
            cscan_movement = c_scan(requests.copy(), head_pos, MAX_CYLINDER)

            # Display results
            print("\n===== Results =====")
            print(f"FCFS total head movement: {fcfs_movement} cylinders")
            print(f"SCAN total head movement: {scan_movement} cylinders")
            print(f"C-SCAN total head movement: {cscan_movement} cylinders")

            # Compare algorithms
            min_movement = min(fcfs_movement, scan_movement, cscan_movement)
            if min_movement == fcfs_movement:
                best = "FCFS"
            elif min_movement == scan_movement:
                best = "SCAN"
            else:
                best = "C-SCAN"

            print(f"\nBest algorithm: {best} with {min_movement} cylinders of head movement")

        except ValueError:
            print("Error: Please enter a valid number.")
        except KeyboardInterrupt:
            print("\nOperation cancelled by user.")
            sys.exit(0)

if __name__ == "__main__":
    main()